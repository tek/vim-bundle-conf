snippet i "import" b
import ${1}${2}
endsnippet

snippet d "def" !b
def $0
endsnippet

snippet "" "multiline quotes" !
"""
${1}
"""
endsnippet

snippet qq "quasiquotes block" !
q"""
${1}
"""
endsnippet

snippet s2 "specs2 is block" !
def is = s2"""
${1}
"""
endsnippet

snippet ob "object def" !b
object $1
{
  $0
}
endsnippet

snippet c "case" !
case ${1:_} =>$0
endsnippet

snippet id "implicit def" !b
implicit def $0
endsnippet

snippet iv "implicit val" !b
implicit val $0
endsnippet

snippet im "implicit" !i
implicit $0
endsnippet

snippet cl "class" !b
class $1
{
  $0
}
endsnippet

snippet cc "case class" !b
case class $1($2)
endsnippet

snippet co "case object" !b
case object $1
endsnippet

snippet ac "abstract class" !b
abstract class $1
{
  $0
}
endsnippet

snippet pd "protected def" !b
protected def $0
endsnippet

snippet ext "implicit extension class" !b
final class ${1}Ops(val self: $1)
extends AnyVal
{
}

trait To$1Ops
{
  implicit def To$1Ops(x: $1): $1Ops = new $1Ops(x)
}
endsnippet

snippet extp "implicit extension class for type param" !b
final class ${1}Ops[A](val self: A)
extends AnyVal
{
}

trait To$1Ops
{
  implicit def To$1Ops[A](x: A): $1Ops[A] = new $1Ops(x)
}
endsnippet

snippet extf "implicit extension class for effect" !b
final class ${1}Ops[F[_], A](val self: ${2:F}[A])
extends AnyVal
{
}

trait To$1Ops
{
  implicit def To$1Ops[A](x: $2[A]): $1Ops[F, A] = new $1Ops(x)
}
endsnippet

snippet trans "machine transition partial function" !b
def $1($2): Transit = {
  case ${3:s} => ${4:s}
}
endsnippet

snippet p "package" !b
package $0
endsnippet

snippet "package .*" "package continuation" !r
`!p snip.rv = match.group(0)`
package $0
endsnippet

global !p
def eol(snip):
  return snip.column == len(snip.buffer[snip.line]) - 1
endglobal

snippet "(\s*).*\b(class|trait|object) .*" "class extends" "eol(snip)" !re
`!p snip.rv = match.group(0)`
`!p snip.rv = snip.mkline('extends', match.group(1))` $0
endsnippet

snippet "(\s*)(extends|with) .*" "extends continuation" "eol(snip)" !re
`!p snip.rv = match.group(0)`
`!p snip.rv = snip.mkline('with', match.group(1))` $0
endsnippet

snippet ind "typeclass instance def" b
implicit def $1_$2: $1[$2] =$0
endsnippet

snippet inv "typeclass instance val" b
implicit val $1_$2: $1[$2] =$0
endsnippet

snippet inst "typeclass instance" !b
implicit def $1_$2: $1[$2] =
  new $1[$2] {
    def $3(a: $2) = $0
  }
endsnippet

snippet instlv "typeclass instance" !b
implicit lazy val $1_$2: $1[$2] =
  new $1[$2] {
    def $3(a: $2) = $0
  }
endsnippet

snippet instK "effect typeclass instance" !b
implicit def $1_$2: $1[$2] =
  new $1[$2] {
    def $3[A](fa: $2[A]) = $0
  }
endsnippet

snippet spec "spec" b
class $1Spec
extends Spec
{
  def is = s2"""
  ${2:test} \$${3:test}
  """

  def $3 = {
    1 === 1
  }
}
endsnippet

snippet h "HList subtype" i
$1 <: HList$0
endsnippet

snippet cp "Coproduct subtype" i
$1 <: Coproduct$0
endsnippet

snippet p1 "Poly1" b
object $1
extends Poly1
{
  implicit def $2[$3]
  : Case.Aux[$4]
  = at { $5 =>
    $0
  }
}
endsnippet

snippet p2 "Poly2" b
object $1
extends Poly2
{
  implicit def $2[$3]
  : Case.Aux[$4]
  = at {
    ($5, $6) =>
      $0
  }
}
endsnippet

snippet c1 "poly Case1" b
implicit def $1[$2]
: Case.Aux[$3]
= at { $4 =>
  $0
}
endsnippet

snippet c2 "poly Case2" b
implicit def $1[$2]
: Case.Aux[$3]
= at {
  ($4, $5) =>
    $0
}
endsnippet

snippet t "trait" b
trait $1
{
  $0
}
endsnippet

snippet doc "doc comment" b
/**
 * $0
 */
endsnippet

snippet "<- .*$" "enumerator continuation" ri
`!p snip.rv = match.group(0)`
$1 <- $2
endsnippet

snippet f "for comp" b
for {
  $1 <- $2
} yield $3
endsnippet

snippet pr "println()" b
println($0)
endsnippet

snippet iec "implicit ExecutionContext" i
(implicit ec: ExecutionContext)
endsnippet

snippet adt "ADT" b
sealed trait $1

object $1
{
  case class $2
  extends $1
}
endsnippet
