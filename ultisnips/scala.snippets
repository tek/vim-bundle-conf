snippet i "import" b
import ${1}${3:.${2:_}}
endsnippet

snippet l "log" b
Log.d($0)
endsnippet

snippet d "method" !b
def ${1:name}(${2}) = {
  $0
}
endsnippet

snippet a "function arg" !
$1: ${2:type}
endsnippet

snippet top "top arrow" !i
↥
endsnippet

snippet bottom "bottom arrow" !i
↧
endsnippet

snippet left "left arrow" !i
↤
endsnippet

snippet right "right arrow" !i
↦
endsnippet

snippet centerh "center horizontal arrow" !i
⇹
endsnippet

snippet matchw "match_parent width arrow" !i
↔
endsnippet

snippet matchh "match_parent height arrow" !i
↕
endsnippet

snippet o "Option" !
Option[${1}]
endsnippet

snippet qq "quasiquotes block" !
q"""
${1}
"""
endsnippet

snippet s2 "specs2 is block" !
def is = s2"""
${1}
"""
endsnippet

snippet gec "global execution context" !b
import concurrent.ExecutionContext.Implicits.global
endsnippet

snippet iec "implicit execution context" !i
implicit ec: EC
endsnippet

snippet |+| "scalaz.Monoid append" !i
⊹
endsnippet

snippet |@| "scalaz.Applicative append" b
⊛
endsnippet

snippet ob "object def" !b
object $1 ${2:
extends $3}
{
  $0
}
endsnippet

snippet ps "print interpolation string" !b
p(s"$0")
endsnippet

snippet case "case" !
case ${1:_} => $0
endsnippet

snippet c "case" !
case ${1:_} => $0
endsnippet

snippet id "implicit def" !b
implicit def ${1}(${2:v}: $3) = {
  $0
}
endsnippet

snippet ic "implicit class" !b
implicit class ${1}(${2:v}: $3) {
  $0
}
endsnippet

snippet ilv "implicit lazy val" !b
implicit lazy val $0
endsnippet

snippet iz "import scalaz" !b
import scalaz._, Scalaz._
endsnippet

snippet im "implicit" !
implicit $0
endsnippet

snippet cl "class" !b
class $1
{
  $0
}
endsnippet

snippet cc "case class definition" !b
case class $1($2)
endsnippet

snippet pdd "protected def" !b
protected def ${1}(${2:v}: $3) = {
  $0
}
endsnippet

snippet ext "implicit extension class" !b
final class ${1}Ops(val self: $1)
extends AnyVal
{
}

trait To$1Ops
{
  implicit def To$1Ops(x: $1): $1Ops = new $1Ops(x)
}
endsnippet

snippet trans "machine transition partial function" !b
def $1($2): Transit = {
  case ${3:s} => ${4:s}
}
endsnippet

snippet p "package" !b
package $0
endsnippet

snippet "package .*" "package continuation" !r
`!p snip.rv = match.group(0)`
package $0
endsnippet

snippet ".*\b(class|trait|object) .*" "class extends" !r
`!p snip.rv = match.group(0)`
extends $0
endsnippet

snippet "(extends|with) .*" "extends continuation" !r
`!p snip.rv = match.group(0)`
with $0
endsnippet

snippet inst "typeclass instance" !b
implicit def instance_$1_$2: $1[$2] =
  new $1[$2] {
    def $3(a: $2) = $0
  }
endsnippet

snippet instK "effect typeclass instance" !b
implicit def instance_$1_$2: $1[$2] =
  new $1[$2] {
    def $3[A](fa: $2[A]) = $0
  }
endsnippet

snippet tc "typeclass" !b
@typeclass trait $1[$2]
{

}
endsnippet
