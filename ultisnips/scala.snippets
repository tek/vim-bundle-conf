snippet i "import" b
import ${1:package}.${2:_}
endsnippet

snippet l "log" b
Log.d($0)
endsnippet

snippet d "method" !b
def ${1:name}(${2}) = {
	$0
}
endsnippet

snippet a "function arg" !
$1: ${2:type}
endsnippet

snippet top "top arrow" !i
↥
endsnippet

snippet bottom "bottom arrow" !i
↧
endsnippet

snippet left "left arrow" !i
↤
endsnippet

snippet right "right arrow" !i
↦
endsnippet

snippet centerh "center horizontal arrow" !i
⇹
endsnippet

snippet matchw "match_parent width arrow" !i
↔
endsnippet

snippet matchh "match_parent height arrow" !i
↕
endsnippet

snippet o "Option" !
Option[${1}]
endsnippet

snippet -> "right double arrow" !
→
endsnippet

snippet => "right double arrow" !
⇒
endsnippet

snippet qq "quasiquotes block" !
q"""
${1}
"""
endsnippet

snippet s2 "specs2 is block" !
def is = s2"""
${1}
"""
endsnippet

snippet dws "db withSession" !b
db withSession { implicit s ⇒
	${1}
}
endsnippet

snippet iec "global execution context" !b
import concurrent.ExecutionContext.Implicits.global
endsnippet

snippet |+| "scalaz monoid append" !i
⊹
endsnippet

snippet im "implicit" !
implicit
endsnippet

snippet ob "object def" !b
object $1 ${2:
extends $3}
{
	$0
}
endsnippet

snippet ps "print interpolation string" !b
p(s"$0")
endsnippet

snippet case "case" !
case ${1:_} ⇒ $0
endsnippet

snippet c "case" !
case ${1:_} ⇒ $0
endsnippet

snippet ic "implicit class" !b
implicit class ${1}(${2:v}: $3) {
	$0
}
endsnippet
