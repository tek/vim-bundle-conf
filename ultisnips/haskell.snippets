global !p
import re

def module_name_from_filename(base: str) -> str:
  import vim
  from amino import Lists
  path = vim.current.buffer.name.rsplit('.')[0]
  segments = Lists.split(path, '/')
  lib_sub = segments.drop_while(lambda a: not re.match(base, a)).drop(1)
  return lib_sub.join_dot

def module_name(base: str) -> str:
  try:
    return module_name_from_filename(base)
  except Exception as e:
    print(e)
    return 'error'

def name_of(ident: str) -> str:
  try:
    from amino import Lists
    return Lists.split(ident, '.').last.get_or_strict('none')
  except Exception as e:
    print(e)
    return 'error'

def test_module() -> str:
  pragma = '{-# OPTIONS_GHC -F -pgmF htfpp #-}'
  return f'''{pragma}

module {module_name('^(u|f|test)$')} (htf_thisModulesTests) where

import Test.Framework'''

def project_name() -> str:
  try:
    import vim
    from amino.util.string import camelcase
    return camelcase(vim.vars.get('proteome_main_name', 'IO'))
  except Exception as e:
    print(e)
    return 'error'

def test_effect() -> str:
  try:
    import vim
    from amino.util.string import camelcase
    return camelcase(vim.vars.get('hs_unit_test_effect', (vim.vars.get('proteome_main_name', 'IO'))))
  except Exception as e:
    print(e)
    return 'error'

def unit_test_imports() -> str:
  name = test_effect()
  return f'''
import {name}.Data.Env ({name})
import Unit (specDef)'''

def tmux_spec_imports() -> str:
  name = test_effect()
  return f'''import Ribosome.Test.Tmux (tmuxSpecDef)

import {name}.Data.Env ({name})'''

def tmux_gui_spec_imports() -> str:
  name = test_effect()
  return f'''import Ribosome.Test.Tmux (tmuxGuiSpecDef)

import {name}.Data.Env ({name})'''

def ribo_spec_imports() -> str:
  name = test_effect()
  return f'''import Unit (specDef)

import {name}.Data.Env ({name})'''

def spec_name() -> str:
  return re.sub('^.', lambda a: a.group(0).lower(), snip.fn.replace('Spec.hs', ''))
endglobal

snippet i "import" b
import $1 (${2:`!p snip.rv = name_of(t[1])`})
endsnippet

snippet iq "import qualified as" b
import qualified $1 as `!p snip.rv = name_of(t[1])` (${2:`!p snip.rv = name_of(t[1])`})
endsnippet

snippet m "module declaration" b
module `!p snip.rv = module_name('(lib|test)$')` where
$0
endsnippet

snippet mt "test module declaration" b
`!p snip.rv = test_module()`
$0
endsnippet

snippet mtu "unit test module" b
`!p snip.rv = test_module()`
`!p snip.rv = unit_test_imports()`

${1:`!p snip.rv = spec_name()`}Spec :: `!p snip.rv = test_effect()` ()
$1Spec = do
  gassertEqual True True

test_$1 :: IO ()
test_$1 =
  specDef $1Spec
endsnippet

snippet mtt "tmux spec" b
`!p snip.rv = test_module()`
`!p snip.rv = tmux_spec_imports()`

${1:`!p snip.rv = spec_name()`}Spec :: `!p snip.rv = test_effect()` ()
$1Spec = do
  gassertEqual True True

test_$1 :: IO ()
test_$1 =
  tmuxSpecDef $1Spec
endsnippet

snippet mttg "tmux gui spec" b
`!p snip.rv = test_module()`
`!p snip.rv = tmux_gui_spec_imports()`

${1:`!p snip.rv = spec_name()`}Spec :: `!p snip.rv = test_effect()` ()
$1Spec = do
  gassertEqual True True

test_$1 :: IO ()
test_$1 =
  tmuxGuiSpecDef $1Spec
endsnippet

snippet mtr "ribo spec" b
`!p snip.rv = test_module()`
`!p snip.rv = ribo_spec_imports()`

${1:`!p snip.rv = spec_name()`}Spec :: `!p snip.rv = test_effect()` ()
$1Spec = do
  gassertEqual True True

test_$1 :: IO ()
test_$1 =
  specDef $1Spec
endsnippet

snippet il "import Log" b
import qualified `!p snip.rv = test_effect()`.Log as Log
endsnippet

snippet ie "import echomS" b
import Ribosome.Api.Echo (echomS)
endsnippet

snippet im "import Neovim monad" b
import `!p snip.rv = test_effect()`.Data.`!p snip.rv = test_effect()` (`!p snip.rv = test_effect()`)
endsnippet

snippet data "data type" b
data $1 =
  ${2:$1} $3
  deriving (Eq, Show)
endsnippet

snippet datar "data type record" b
data $1 =
  ${1} {
    $3 :: $4
  }
  deriving (Eq, Show)
endsnippet

snippet datag "GADT" b
data $1 where
  $0
endsnippet

snippet nt "newtype" b
newtype $1 =
  $1 $2
  deriving (Eq, Show)
endsnippet

snippet f "function" b
$1 :: ${2:m ()}
$1 =
  undefined
endsnippet

snippet t "test" b
$1Spec :: m ()
$1Spec =
  undefined

test_$1 :: IO ()
test_$1 =
  spec $1Spec
endsnippet

snippet id "import Data" b
import `!p snip.rv = project_name()`.Data.$1 ($1(..))
endsnippet

snippet inst "instance" b
instance $1 where
  $0
endsnippet

snippet c "class" b
class $1 where
  $0
endsnippet

snippet th "TH pragma" b
{-# LANGUAGE TemplateHaskell #-}
endsnippet

snippet pr "pragma"
{-# $0 #-}
endsnippet

snippet lpr "language pragma"
{-# LANGUAGE $0 #-}
endsnippet

snippet dac "DeriveAnyClass pragma" b
{-# LANGUAGE DeriveAnyClass #-}
endsnippet

snippet qq "QuasiQuotes pragma" b
{-# LANGUAGE QuasiQuotes #-}
endsnippet

snippet ud "undefined"
undefined
endsnippet
