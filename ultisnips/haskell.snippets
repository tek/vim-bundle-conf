global !p
import re

def module_name_from_filename(base: str) -> str:
  import vim
  from amino import Lists
  path = vim.current.buffer.name.rsplit('.')[0]
  segments = Lists.split(path, '/')
  lib_sub = segments.drop_while(lambda a: not re.match(base, a)).drop(1)
  return lib_sub.join_dot

def module_name(base: str) -> str:
  try:
    return module_name_from_filename(base)
  except Exception as e:
    print(e)
    return 'error'

def name_of(ident: str) -> str:
  try:
    from amino import Lists
    return Lists.split(ident, '.').last.get_or_strict('none')
  except Exception as e:
    print(e)
    return 'error'

def test_module() -> str:
  pragma = '{-# OPTIONS_GHC -F -pgmF htfpp #-}'
  return f'''{pragma}

module {module_name('u|f')}(
  htf_thisModulesTests
) where

import Test.Framework'''

def test_effect() -> str:
  try:
    import vim
    from amino.util.string import camelcase
    return camelcase(vim.vars.get('hs_unit_test_effect', (vim.vars.get('proteome_main_name', 'IO'))))
  except Exception as e:
    print(e)
    return 'error'

def unit_test_imports() -> str:
  name = test_effect()
  return f'''import Control.Monad.IO.Class (liftIO)
import {name}.Data.{name} ({name})
import {name}.Test.Unit (specWithDef)
import Config (vars)'''

def spec_name() -> str:
  return re.sub('^.', lambda a: a.group(0).lower(), snip.fn.replace('Spec.hs', ''))
endglobal

snippet i "import" b
import $0
endsnippet

snippet iq "import qualified" b
import qualified $0
endsnippet

snippet iqa "import qualified as" b
import qualified $1 as `!p snip.rv = name_of(t[1])` ($3)
endsnippet

snippet m "module declaration" b
module `!p snip.rv = module_name('lib$')`(
) where

$0
endsnippet

snippet mt "test module declaration" b
`!p snip.rv = test_module()`
$0
endsnippet

snippet mtu "unit test module" b
`!p snip.rv = test_module()`
`!p snip.rv = unit_test_imports()`

${1:`!p snip.rv = spec_name()`}Spec :: `!p snip.rv = test_effect()` ()
$1Spec = do
  liftIO $ assertEqual "" ""

test_$1 :: IO ()
test_$1 =
  vars >>= specWithDef $1Spec
endsnippet

snippet il "import Log" b
import qualified `!p snip.rv = test_effect()`.Log as Log
endsnippet

snippet ie "import echomS" b
import Ribosome.Api.Echo (echomS)
endsnippet
