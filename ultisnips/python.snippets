clearsnippets test

global !p
import tek_vim_py_test
import tek_vim_py_inspect
from amino import *
from amino.util.string import *

rex = Regex(':.*')

def init_attr(h, t, n=1):
  snip.shift()
  first = snip.mkline(h)
  for i in range(n):
    snip.shift()
  rest = t / snip.mkline
  snip.rv = rest.cons(first).join_lines

def pass_token():
  snip.rv = 'pass'

def init_params(num: int):
    return List.wrap(t[num].split(', ')).map(L(rex.sub)('', _))

def init_attrs(num: int):
    return (
        init_params(num)
            .map(lambda a: f'self.{a} = {a}')
            .detach_head
            .map2(init_attr) |
            pass_token
    )

def cons_params(num: int):
    snip.shift()
    return List.wrap(t[num].split(', ')).map(lambda a: f'{a},').detach_head.map2(init_attr)

def init_args(num: int):
    return init_params(num).map(lambda a: f'{a},').detach_head.map2(lambda a, b: init_attr(a, b, 2))
endglobal

snippet cl "class"
class $1:
	${0:pass}
endsnippet

snippet ss "self private" w
self._
endsnippet

snippet sss "self scoped" w
self.__
endsnippet

snippet def "function" !
def ${1}(`!p
if len(snip.indent) == 4:
	snip.rv = 'self'
	snip.rv += (", " if len(t[2]) else "")`${2}) -> ${3:None}:
	${0}
endsnippet

snippet deff "explicit free function" !
def ${1}(${2}) -> ${3:None}:
	${0}
endsnippet

snippet defp "property" !
@property
def ${1}(self) -> ${3}:
	${0}
endsnippet

snippet defz "lazy property" !b
@lazy
def ${1}(self) -> ${3}:
	${0}
endsnippet

snippet defl "private function" !
def _${1}(`!p
if snip.indent:
	snip.rv = 'self'
	snip.rv += (", " if len(t[2]) else "")`${2}) -> ${3}:
	${0}
endsnippet

snippet defL "private property" !
@property
def _${1}(self) -> ${3}:
	${0}
endsnippet

snippet defc "classmethod" !
@classmethod
def ${1}(`!p
snip.rv = 'self'
snip.rv += (", " if len(t[2]) else "")`${2}) -> ${3}:
	${0}
endsnippet

snippet defst "staticmethod" !
@staticmethod
def ${1}(${2}) -> ${3}:
	${0}
endsnippet

snippet decf "decorated function" !b
@$1
def $2(`!p
if snip.indent:
	snip.rv = 'self'
	snip.rv += (", " if len(t[3]) else "")`$3) -> ${3}:
	${0}
endsnippet

snippet defa "abstract method" !
@abc.abstractmethod
def ${1}(self, $2) -> $3:
	...
endsnippet

snippet defap "abstract property" !
@abc.abstractproperty
def ${1}(self) -> $2:
	...
endsnippet

snippet inf "logger.info" !b
logger.info(${0})
endsnippet

snippet defs "special function" !
def __${1}__(self`!p
snip.rv = (', ' if len(t[2]) else '')`${2}) -> ${3}:
	${0:pass}
endsnippet

snippet init "init function" !b
def __init__(self`!p
snip.rv = (', ' if len(t[1]) else '')`${1}) -> None:
`!p init_attrs(1)`$0
endsnippet

snippet ds "docstring" !
'''${0}
'''
endsnippet

snippet i "import" !b
import $0
endsnippet

snippet try "Try / Except" !b
try:
	${VISUAL}
except ${1:Exception}`!p
snip.rv = (' as ' if len(t[2]) else '')`${2:e}:
	${3}
endsnippet

snippet trye "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception}`!p
snip.rv = (' as ' if len(t[3]) else '')`${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception}`!p
snip.rv = (' as ' if len(t[3]) else '')`${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception}`!p
snip.rv = (' as ' if len(t[3]) else '')`${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

snippet sup "super" !i
super().${1:`!p
tek_vim_py_test.parse_file()
snip.rv = tek_vim_py_test.current_function_name()`}(${2:`!p
f = tek_vim_py_inspect.containing_function()
if f:
	args = f.args
	a = List.wrap(args.args[1:] + args.kwonlyargs) / _.arg
	s = List(Maybe(args.vararg) / _.arg / '*{}'.format,
					 Maybe(args.kwarg) / _.arg / '**{}'.format).join
	snip.rv = ', '.join(a + s)
`})
endsnippet

snippet aa "private attribute assignment" !b
self._${1:argname} = $1
endsnippet

snippet wv "with statement from visual" !b
with ${VISUAL} as ${2}:
endsnippet

snippet r "return statement" !b
return ${0:value}
endsnippet

global !p
import random
import string

def randname():
    return ''.join(random.sample(string.ascii_lowercase, 6))
endglobal

snippet p "print" !b
print(${1:'${2:text}'})
endsnippet

snippet from "from import" !b
from $1 import $2
endsnippet

snippet f "from import" !b
from $1 import $2
endsnippet

snippet ti "mypy ignore" !
 # type: ignore
endsnippet

snippet lg "self.log" !b
self.log.$1
endsnippet

snippet d "self.log.test" !w
self.log.test($1)
endsnippet

snippet rl "ribo_log.test" !w
ribo_log.test($1)
endsnippet

snippet rd "ribo_log.debug" !w
ribo_log.debug($1)
endsnippet

snippet al "amino_log.test" !w
amino_log.test($1)
endsnippet

snippet nl "ribosome logging import" !b
from ribosome.logging import ribo_log
ribo_log.test($1)
endsnippet

snippet at "init attribute" b
self.$1 = $1
endsnippet

snippet "self.(\w+) = \1" "init attribute continuation" r
`!p snip.rv = match.group(0)`
self.$1 = $1
endsnippet

snippet defex "klk expectation" b
def $1(self) -> Expectation:
    return k(1) == 1
endsnippet

snippet tv "type variable" b
$1 = TypeVar('$1'$2)
endsnippet

snippet do "do notation function" b
@do($3)
def $1($2) -> Do:
    yield $0
endsnippet

snippet ndo "@do(NS)" b
@do(NS[None, None])
def $1() -> Do:
    yield NS.unit
endsnippet

snippet dat "data class" b
class $1(Dat['$1']):

    @staticmethod
    def cons(
    `!p cons_params(2)`
    ) -> '$1':
        return $1(
        `!p init_args(2)`
        )

    def __init__(self`!p snip.rv = (', ' if len(t[2]) else '')`$2) -> None:
    `!p init_attrs(2)`
endsnippet

snippet prg "ribosome program" b
@prog
@do(NS[None, None])
def $1() -> Do:
    yield NS.unit
endsnippet

snippet prgd "ribosome program with prog.do" b
@prog.do
@do(Prog[None])
def $1() -> Do:
    yield Prog.unit
endsnippet

snippet case "case match" b
class $1(Case[$2, $3], alg=$2):

    def $4(self, $5) -> $6:
        $0
endsnippet

priority 1

snippet s "self" w
self.
endsnippet
